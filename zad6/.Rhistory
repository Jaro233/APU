read.csv("C:/Users/jaro9/OneDrive/Desktop/apu/lodowki.csv")
load("C:/Users/jaro9/OneDrive/Desktop/apu/sprawko1/lodowki.csv")
#Wariant 5
install.packages("neuralnet")
library(neuralnet)
#x ∈ [1; 10]
input <-  as.data.frame(runif(1000, min=1, max=10))
#f(x) = x^2 + e^−x
output <- input^2 + exp(1)^(-input)
#Po laaczenie danych wejsciowych i wyjsciowych
trainingdata <- cbind(input,output)
colnames(trainingdata) <- c("Wejscie","Wyjscie")
#Trenowanie sieci neuronowej
net.sqrt <- neuralnet(Wyjscie~Wejscie,trainingdata, hidden=7, threshold=0.01, stepmax=1e7)
print(net.sqrt)
plot(net.sqrt, rep = "best")
#Prognozowanie z pomoca˛ sieci neuronowej
testdata <- as.data.frame(runif(300, min=1, max=10))
net.results <- compute(net.sqrt, testdata)
print(net.results$net.result)
cleanoutput <- cbind(testdata,log(testdata^2), as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Wejscie","Oczekiwane Wyjscie","Wyjscie sieci neuronowej")
print(cleanoutput)
install.packages("neuralnet")
install.packages("neuralnet")
library(neuralnet)
#x ∈ [1; 10]
input <-  as.data.frame(runif(100, min=1, max=10))
#f(x) = x^2 + e^−x
output <- input^2 + exp(1)^(-input)
#Po laaczenie danych wejsciowych i wyjsciowych
trainingdata <- cbind(input,output)
colnames(trainingdata) <- c("Wejscie","Wyjscie")
#Trenowanie sieci neuronowej
net.sqrt <- neuralnet(Wyjscie~Wejscie,trainingdata, hidden=7, threshold=0.01, stepmax=1e7)
print(net.sqrt)
plot(net.sqrt, rep = "best")
#Prognozowanie z pomoca˛ sieci neuronowej
testdata <- as.data.frame(runif(300, min=1, max=10))
net.results <- compute(net.sqrt, testdata)
print(net.results$net.result)
cleanoutput <- cbind(testdata,log(testdata^2), as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Wejscie","Oczekiwane Wyjscie","Wyjscie sieci neuronowej")
print(cleanoutput)
#Wariant 5
df <- read.csv("C:/Users/jaro9/OneDrive/Desktop/apu/zad3/lodowki.csv")
pojemność <- df[["pojemność"]]
cena <- df[["cena"]]
compare.trainingdata <- cbind(pojemnosc, cena)
scale.pojemnosc <- as.data.frame(scale(pojemnosc))
#Wariant 5
df <- read.csv("C:/Users/jaro9/OneDrive/Desktop/apu/zad3/lodowki.csv")
pojemność <- df[["pojemność"]]
cena <- df[["cena"]]
compare.trainingdata <- cbind(pojemnosc, cena)
#Wariant 5
df <- read.csv("C:/Users/jaro9/OneDrive/Desktop/apu/zad3/lodowki.csv")
pojemność <- df[["pojemność"]]
cena <- df[["cena"]]
compare.trainingdata <- cbind(pojemnosc, cena)
View(df)
compare.trainingdata <- cbind(pojemnosc, cena)
#Wariant 5
df <- read.csv("C:/Users/jaro9/OneDrive/Desktop/apu/zad3/lodowki.csv")
pojemnosc <- df[["pojemnosc"]]
cena <- df[["cena"]]
compare.trainingdata <- cbind(pojemnosc, cena)
scaled.pojemnosc <- as.data.frame(scale(pojemnosc))
trainingdata <- cbind(scaled.pojemnosc, cena)
colnames(trainingdata) <- c("Pojemnosc", "Cena")
#(error ≤ 100 z l)
net.price <- neuralnet(Cena~Pojemnosc,trainingdata, hidden<-c(7,1), threshold<-100, lifesign <- "full")
plot(net.price)
testdata <- data.frame(c(20,130))
scaled.testdata <- as.data.frame(scale(testdata))
net.results <- compute(net.price, scaled.testdata)
fixed_cena <- cbind(testdata, as.data.frame(net.results$net.result))
colnames(fixed_cena) <- c("Pojemnosc", "Cena")
print(fixed_cena)
df <- read.csv("C:/Users/jaro9/OneDrive/Desktop/apu/zad3/lodowki.csv")
pojemnosc <- df[["pojemnosc"]]
cena <- df[["cena"]]
compare.trainingdata <- cbind(pojemnosc, cena)
scaled.pojemnosc <- as.data.frame(scale(pojemnosc))
trainingdata <- cbind(scaled.pojemnosc, cena)
colnames(trainingdata) <- c("Pojemnosc", "Cena")
#(error ≤ 100 z l)
net.price <- neuralnet(Cena~Pojemnosc,trainingdata, hidden<-c(7,1), threshold<-100, lifesign <- "full")
plot(net.price)
testdata <- data.frame(c(20,130))
scaled.testdata <- as.data.frame(scale(testdata))
net.results <- compute(net.price, scaled.testdata)
fixed_cena <- cbind(testdata, as.data.frame(net.results$net.result))
colnames(fixed_cena) <- c("Pojemnosc", "Cena")
print(fixed_cena)
setwd("C:/Users/jaro9/OneDrive/Desktop/apu/zad6")
install_tensorflow()
install.packages("tensorflow")
library("tensorflow")
#install.packages("keras")
library("keras")
#load data cifar 10
cifar <- dataset_cifar10()
install_tensorflow()
#load data cifar 10
cifar <- dataset_cifar10()
install.packages("keras")
install.packages("keras")
library("keras")
#load data cifar 10
cifar <- dataset_cifar10()
tensorflow::install_tensorflow()
